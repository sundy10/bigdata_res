package chapter08

object scala05_placeholder extends App {

  /**
   * 8.5函数 占位符语法
   *
   * 为了让函数字面量更加精简，还可以使用下画线作为占位符，用来表示一个或多个参数，
   *
   * 只要满足每个参数只在函数字面量中出现一次即可。
   * 例如，_>0是一个非常短的表示法，表示一个检查某个值是否大于0的函数:
   *
   * (可以将下画线当作表达式中的需要被“填”的“空”。在函数每次被调用时，这个“空”都会被一个入参“填”上。)
   */

  val someNumbers = List(-11, -10, -5, 0, 5, 10)

  println(someNumbers.filter(_ > 0))

  //有时候当你用下画线为参数占位时，编译器可能并没有足够多的信息来推断缺失的参数类型。例如，假设你只是写了_+_:
  //在这类情况下，可以用冒号来给出类型，就像这样:
  val f = (_: Int) + (_: Int)
  val ff = (_: String)+(_: String)
  println(f(2,3))
  println(ff("2","3"))

  /**
   * 用这样的精简写法的原因。多个下画线意味着多个参数，而不是对单个参数的重复使用。第一个下画线代表第一个参数，
   * 第二个下画线代表第二个参数,第三个下画线代表第三个参数，以此类推。
   */
}
